/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aug3.test.io.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ServicePool extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ServicePool\",\"namespace\":\"com.aug3.test.io.avro\",\"fields\":[{\"name\":\"si\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ServiceInstance\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"uri\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UriSpec\",\"fields\":[{\"name\":\"host\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"int\"},{\"name\":\"scheme\",\"type\":{\"type\":\"enum\",\"name\":\"ProtocolType\",\"symbols\":[\"HTTP\",\"RPC\",\"AMQP\"]}}]}}},{\"name\":\"ts\",\"type\":\"long\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<com.aug3.test.io.avro.ServiceInstance> si;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ServicePool() {}

  /**
   * All-args constructor.
   */
  public ServicePool(java.util.List<com.aug3.test.io.avro.ServiceInstance> si) {
    this.si = si;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return si;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: si = (java.util.List<com.aug3.test.io.avro.ServiceInstance>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'si' field.
   */
  public java.util.List<com.aug3.test.io.avro.ServiceInstance> getSi() {
    return si;
  }

  /**
   * Sets the value of the 'si' field.
   * @param value the value to set.
   */
  public void setSi(java.util.List<com.aug3.test.io.avro.ServiceInstance> value) {
    this.si = value;
  }

  /** Creates a new ServicePool RecordBuilder */
  public static com.aug3.test.io.avro.ServicePool.Builder newBuilder() {
    return new com.aug3.test.io.avro.ServicePool.Builder();
  }
  
  /** Creates a new ServicePool RecordBuilder by copying an existing Builder */
  public static com.aug3.test.io.avro.ServicePool.Builder newBuilder(com.aug3.test.io.avro.ServicePool.Builder other) {
    return new com.aug3.test.io.avro.ServicePool.Builder(other);
  }
  
  /** Creates a new ServicePool RecordBuilder by copying an existing ServicePool instance */
  public static com.aug3.test.io.avro.ServicePool.Builder newBuilder(com.aug3.test.io.avro.ServicePool other) {
    return new com.aug3.test.io.avro.ServicePool.Builder(other);
  }
  
  /**
   * RecordBuilder for ServicePool instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ServicePool>
    implements org.apache.avro.data.RecordBuilder<ServicePool> {

    private java.util.List<com.aug3.test.io.avro.ServiceInstance> si;

    /** Creates a new Builder */
    private Builder() {
      super(com.aug3.test.io.avro.ServicePool.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.aug3.test.io.avro.ServicePool.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.si)) {
        this.si = data().deepCopy(fields()[0].schema(), other.si);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ServicePool instance */
    private Builder(com.aug3.test.io.avro.ServicePool other) {
            super(com.aug3.test.io.avro.ServicePool.SCHEMA$);
      if (isValidValue(fields()[0], other.si)) {
        this.si = data().deepCopy(fields()[0].schema(), other.si);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'si' field */
    public java.util.List<com.aug3.test.io.avro.ServiceInstance> getSi() {
      return si;
    }
    
    /** Sets the value of the 'si' field */
    public com.aug3.test.io.avro.ServicePool.Builder setSi(java.util.List<com.aug3.test.io.avro.ServiceInstance> value) {
      validate(fields()[0], value);
      this.si = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'si' field has been set */
    public boolean hasSi() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'si' field */
    public com.aug3.test.io.avro.ServicePool.Builder clearSi() {
      si = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public ServicePool build() {
      try {
        ServicePool record = new ServicePool();
        record.si = fieldSetFlags()[0] ? this.si : (java.util.List<com.aug3.test.io.avro.ServiceInstance>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
