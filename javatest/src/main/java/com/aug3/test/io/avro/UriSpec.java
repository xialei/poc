/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aug3.test.io.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UriSpec extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UriSpec\",\"namespace\":\"com.aug3.test.io.avro\",\"fields\":[{\"name\":\"host\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"int\"},{\"name\":\"scheme\",\"type\":{\"type\":\"enum\",\"name\":\"ProtocolType\",\"symbols\":[\"HTTP\",\"RPC\",\"AMQP\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence host;
  @Deprecated public int port;
  @Deprecated public com.aug3.test.io.avro.ProtocolType scheme;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UriSpec() {}

  /**
   * All-args constructor.
   */
  public UriSpec(java.lang.CharSequence host, java.lang.Integer port, com.aug3.test.io.avro.ProtocolType scheme) {
    this.host = host;
    this.port = port;
    this.scheme = scheme;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return host;
    case 1: return port;
    case 2: return scheme;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: host = (java.lang.CharSequence)value$; break;
    case 1: port = (java.lang.Integer)value$; break;
    case 2: scheme = (com.aug3.test.io.avro.ProtocolType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'host' field.
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'port' field.
   */
  public java.lang.Integer getPort() {
    return port;
  }

  /**
   * Sets the value of the 'port' field.
   * @param value the value to set.
   */
  public void setPort(java.lang.Integer value) {
    this.port = value;
  }

  /**
   * Gets the value of the 'scheme' field.
   */
  public com.aug3.test.io.avro.ProtocolType getScheme() {
    return scheme;
  }

  /**
   * Sets the value of the 'scheme' field.
   * @param value the value to set.
   */
  public void setScheme(com.aug3.test.io.avro.ProtocolType value) {
    this.scheme = value;
  }

  /** Creates a new UriSpec RecordBuilder */
  public static com.aug3.test.io.avro.UriSpec.Builder newBuilder() {
    return new com.aug3.test.io.avro.UriSpec.Builder();
  }
  
  /** Creates a new UriSpec RecordBuilder by copying an existing Builder */
  public static com.aug3.test.io.avro.UriSpec.Builder newBuilder(com.aug3.test.io.avro.UriSpec.Builder other) {
    return new com.aug3.test.io.avro.UriSpec.Builder(other);
  }
  
  /** Creates a new UriSpec RecordBuilder by copying an existing UriSpec instance */
  public static com.aug3.test.io.avro.UriSpec.Builder newBuilder(com.aug3.test.io.avro.UriSpec other) {
    return new com.aug3.test.io.avro.UriSpec.Builder(other);
  }
  
  /**
   * RecordBuilder for UriSpec instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UriSpec>
    implements org.apache.avro.data.RecordBuilder<UriSpec> {

    private java.lang.CharSequence host;
    private int port;
    private com.aug3.test.io.avro.ProtocolType scheme;

    /** Creates a new Builder */
    private Builder() {
      super(com.aug3.test.io.avro.UriSpec.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.aug3.test.io.avro.UriSpec.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.host)) {
        this.host = data().deepCopy(fields()[0].schema(), other.host);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.port)) {
        this.port = data().deepCopy(fields()[1].schema(), other.port);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.scheme)) {
        this.scheme = data().deepCopy(fields()[2].schema(), other.scheme);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing UriSpec instance */
    private Builder(com.aug3.test.io.avro.UriSpec other) {
            super(com.aug3.test.io.avro.UriSpec.SCHEMA$);
      if (isValidValue(fields()[0], other.host)) {
        this.host = data().deepCopy(fields()[0].schema(), other.host);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.port)) {
        this.port = data().deepCopy(fields()[1].schema(), other.port);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.scheme)) {
        this.scheme = data().deepCopy(fields()[2].schema(), other.scheme);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'host' field */
    public java.lang.CharSequence getHost() {
      return host;
    }
    
    /** Sets the value of the 'host' field */
    public com.aug3.test.io.avro.UriSpec.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.host = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'host' field has been set */
    public boolean hasHost() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'host' field */
    public com.aug3.test.io.avro.UriSpec.Builder clearHost() {
      host = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'port' field */
    public java.lang.Integer getPort() {
      return port;
    }
    
    /** Sets the value of the 'port' field */
    public com.aug3.test.io.avro.UriSpec.Builder setPort(int value) {
      validate(fields()[1], value);
      this.port = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'port' field has been set */
    public boolean hasPort() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'port' field */
    public com.aug3.test.io.avro.UriSpec.Builder clearPort() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'scheme' field */
    public com.aug3.test.io.avro.ProtocolType getScheme() {
      return scheme;
    }
    
    /** Sets the value of the 'scheme' field */
    public com.aug3.test.io.avro.UriSpec.Builder setScheme(com.aug3.test.io.avro.ProtocolType value) {
      validate(fields()[2], value);
      this.scheme = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'scheme' field has been set */
    public boolean hasScheme() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'scheme' field */
    public com.aug3.test.io.avro.UriSpec.Builder clearScheme() {
      scheme = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public UriSpec build() {
      try {
        UriSpec record = new UriSpec();
        record.host = fieldSetFlags()[0] ? this.host : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.port = fieldSetFlags()[1] ? this.port : (java.lang.Integer) defaultValue(fields()[1]);
        record.scheme = fieldSetFlags()[2] ? this.scheme : (com.aug3.test.io.avro.ProtocolType) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
